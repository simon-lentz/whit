// Generated by whit. DO NOT EDIT.
package PeopleAndVehiclesSchema

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hlindberg/testutils"
	"github.com/wyrth-io/whit/internal/utils"
	"github.com/wyrth-io/whit/internal/validation"
	"github.com/wyrth-io/whit/internal/yammm"
)

func Test_Yammm_Meta(t *testing.T) {
	tt := testutils.NewTester(t)
	// Create an instance using the Go API for the model.
	car := Car{RegisteredVehicle: RegisteredVehicle{
		Vehicle:    Vehicle{Color: "red"},
		Registered: Registered{RegNbr: "ABC123"}},
	}
	// Create a Context
	ctx := yammm.NewContext()
	// ... and set it up with the generated Yammm meta model that is
	// completed.
	ctx.SetModelFromJSON(strings.NewReader(SerializedModel))
	ic := validation.NewIssueCollector()
	ctx.Complete(ic)

	// Create the Meta API to access "type of"
	meta := yammm.NewMeta(ctx)
	yammlType := meta.TypeModel(car)
	tt.CheckNotNil(yammlType)
	tt.CheckEqual("Car", yammlType.Name)

	// Get properties via their Go name
	regNbr := meta.PropertyByName(car, "RegNbr")
	tt.CheckEqual("ABC123", regNbr)

	color := meta.PropertyByName(car, "Color")
	tt.CheckEqual("red", color)
}
func Test_Type_AllProperties(t *testing.T) {
	tt := testutils.NewTester(t)
	// Create an instance using the Go API for the model.
	car := Car{RegisteredVehicle: RegisteredVehicle{
		Vehicle:    Vehicle{Color: "red"},
		Registered: Registered{RegNbr: "ABC123"}},
	}
	// Create a Context
	ctx := yammm.NewContext()
	// ... and set it up with the generated Yammm meta model that is
	// completed.
	err := ctx.SetModelFromJSON(strings.NewReader(SerializedModel))
	tt.CheckNotError(err)
	ic := validation.NewIssueCollector()
	ctx.Complete(ic)
	// Create the Meta API to access "type of"
	meta := yammm.NewMeta(ctx)
	yammmType := meta.TypeModel(car)
	tt.CheckNotNil(yammmType)
	tt.CheckEqual("Car", yammmType.Name)

	// Get all properties (including inherited). Make a set of
	// all property names as they are generated in Go.
	allProps := yammmType.AllProperties()
	propsSet := utils.NewSetFrom(allProps, func(p *yammm.Property) string {
		return p.GoName()
	})
	expected := utils.NewSet("RegNbr", "Color", "Model", "RegistrationDate", "DeregisterationDate")
	fmt.Printf("%s", propsSet.String())
	tt.CheckTrue(propsSet.Diff(expected).Empty())
}
