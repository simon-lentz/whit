// Package PeopleAndVehiclesSchema is generated by whit yammm go generator. DO NOT EDIT.
package PeopleAndVehiclesSchema
//nolint
type Car struct {
    RegisteredVehicle
}
type Person struct {
    Entity
    Birthday unspecified `json:"birthday"`
    Name string `json:"name"`
    Retired *Retired `json:"Retired,omitempty"`
}
type Retirement struct {
    Id string `json:"id"`
}
type Retired struct {
    HAS_RETIRED_Retirement *EDGE_HAS_RETIRED_Retirement `json:"HAS_RETIRED_Retirement,omitempty"`
}
type MC struct {
    RegisteredVehicle
}
type Registered struct {
    RegNbr string `json:"regNbr"`
    RegistrationDate unspecified `json:"registrationDate"`
    DeregisterationDate unspecified `json:"deregisterationDate,omitempty"`
    REGISTERED_WITH_Registrar *EDGE_REGISTERED_WITH_Registrar `json:"REGISTERED_WITH_Registrar,omitempty"`
}
type Registrar struct {
    Name string `json:"name"`
}
type Vehicle struct {
    Color unspecified `json:"color,omitempty"`
    Model string `json:"model,omitempty"`
}
type RegisteredVehicle struct {
    Vehicle
    Registered
}
type Bicycle struct {
    Vehicle
    BikeID string `json:"bikeID"`
}
type MotorVehicleOwner struct {
    OWNS_VEHICLE_RegisteredVehicle *EDGE_OWNS_VEHICLE_RegisteredVehicle `json:"OWNS_VEHICLE_RegisteredVehicle,omitempty"`
}
type Entity struct {
    MotorVehicleOwner *MotorVehicleOwner `json:"MotorVehicleOwner,omitempty"`
}
type Company struct {
    Entity
}
type Graph struct {
    Cars []*Car `json:"Cars,omitempty"`
    People []*Person `json:"People,omitempty"`
    Retirements []*Retirement `json:"Retirements,omitempty"`
    Retireds []*Retired `json:"Retireds,omitempty"`
    MCS []*MC `json:"MCS,omitempty"`
    Registrars []*Registrar `json:"Registrars,omitempty"`
    Bicycles []*Bicycle `json:"Bicycles,omitempty"`
    Companies []*Company `json:"Companies,omitempty"`
}
// data type: timeStamp string
type EDGE_HAS_RETIRED_Retirement struct {
    FromDate unspecified `json:"fromDate"`
    Where struct {
        Id string `json:"id"`
    } `json:"WHERE"`
}
type EDGE_REGISTERED_WITH_Registrar struct {
    Where struct {
        Name "DMV"|"ABC" `json:"name"`
    } `json:"WHERE"`
}
type EDGE_OWNS_VEHICLE_RegisteredVehicle struct {
    FromDate unspecified `json:"fromDate"`
    ToDate? unspecified `json:"toDate?"`
    Where struct {
        RegNbr string `json:"regNbr"`
    } `json:"WHERE"`
}
const schemaBlob =`
{
	"name": "PeopleAndVehiclesSchema",
	"types": [
		{
			"name": "Car",
			"plural_name": "Cars",
			"inherits": [
				"RegisteredVehicle"
			]
		},
		{
			"name": "Person",
			"plural_name": "People",
			"properties": [
				{
					"name": "birthday",
					"type": "#timeStamp"
				},
				{
					"name": "name",
					"type": "string",
					"primary": true
				}
			],
			"inherits": [
				"Entity"
			],
			"mixins": [
				"Retired"
			]
		},
		{
			"name": "Retirement",
			"plural_name": "Retirements",
			"properties": [
				{
					"name": "id",
					"type": "string",
					"primary": true
				}
			]
		},
		{
			"name": "Retired",
			"plural_name": "Retireds",
			"associations": [
				{
					"to": "Retirement",
					"optional": true,
					"many": false,
					"name": "HAS_RETIRED",
					"properties": [
						{
							"name": "fromDate",
							"type": "#timeStamp"
						}
					]
				}
			]
		},
		{
			"name": "MC",
			"plural_name": "MCS",
			"inherits": [
				"RegisteredVehicle"
			]
		},
		{
			"name": "Registered",
			"plural_name": "Registereds",
			"properties": [
				{
					"name": "regNbr",
					"type": "string",
					"primary": true
				},
				{
					"name": "registrationDate",
					"type": "#timeStamp"
				},
				{
					"name": "deregisterationDate",
					"type": "#timeStamp",
					"optional": true
				}
			],
			"associations": [
				{
					"to": "Registrar",
					"optional": true,
					"many": false,
					"name": "REGISTERED_WITH"
				}
			],
			"is_abstract": true
		},
		{
			"name": "Registrar",
			"plural_name": "Registrars",
			"properties": [
				{
					"name": "name",
					"type": "\"DMV\"|\"ABC\"",
					"primary": true
				}
			]
		},
		{
			"name": "Vehicle",
			"plural_name": "Vehicles",
			"properties": [
				{
					"name": "color",
					"type": "color",
					"optional": true
				},
				{
					"name": "model",
					"type": "string",
					"optional": true
				}
			],
			"is_abstract": true
		},
		{
			"name": "RegisteredVehicle",
			"plural_name": "RegisteredVehicles",
			"inherits": [
				"Vehicle",
				"Registered"
			],
			"is_abstract": true
		},
		{
			"name": "Bicycle",
			"plural_name": "Bicycles",
			"properties": [
				{
					"name": "bikeID",
					"type": "string",
					"primary": true
				}
			],
			"inherits": [
				"Vehicle"
			]
		},
		{
			"name": "MotorVehicleOwner",
			"plural_name": "MotorVehicleOwners",
			"associations": [
				{
					"to": "RegisteredVehicle",
					"optional": true,
					"many": false,
					"name": "OWNS_VEHICLE",
					"properties": [
						{
							"name": "fromDate",
							"type": "#timeStamp"
						},
						{
							"name": "toDate?",
							"type": "#timeStamp"
						}
					]
				}
			],
			"is_mixin": true
		},
		{
			"name": "Entity",
			"plural_name": "Entities",
			"mixins": [
				"MotorVehicleOwner"
			],
			"is_abstract": true
		},
		{
			"name": "Company",
			"plural_name": "Companies",
			"inherits": [
				"Entity"
			]
		}
	],
	"data_types": [
		{
			"name": "timeStamp",
			"type": "string"
		}
	]
}
`
